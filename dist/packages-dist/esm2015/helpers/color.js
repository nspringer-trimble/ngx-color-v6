import { TinyColor } from '@ctrl/tinycolor';
export function simpleCheckForValidColor(data) {
    const keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
    let checked = 0;
    let passed = 0;
    keysToCheck.forEach(letter => {
        if (!data[letter]) {
            return;
        }
        checked += 1;
        if (!isNaN(data[letter])) {
            passed += 1;
        }
        if (letter === 's' || letter === 'l') {
            const percentPatt = /^\d+%$/;
            if (percentPatt.test(data[letter])) {
                passed += 1;
            }
        }
    });
    return checked === passed ? data : false;
}
export function toState(data, oldHue, disableAlpha) {
    const color = data.hex ? new TinyColor(data.hex) : new TinyColor(data);
    if (disableAlpha) {
        color.setAlpha(1);
    }
    const hsl = color.toHsl();
    const hsv = color.toHsv();
    const rgb = color.toRgb();
    const hex = color.toHex();
    if (hsl.s === 0) {
        hsl.h = oldHue || 0;
        hsv.h = oldHue || 0;
    }
    const transparent = hex === '000000' && rgb.a === 0;
    return {
        hsl,
        hex: transparent ? 'transparent' : color.toHexString(),
        rgb,
        hsv,
        oldHue: data.h || oldHue || hsl.h,
        source: data.source,
    };
}
export function isValidHex(hex) {
    return new TinyColor(hex).isValid;
}
export function getContrastingColor(data) {
    if (!data) {
        return '#fff';
    }
    const col = toState(data);
    if (col.hex === 'transparent') {
        return 'rgba(0,0,0,0.4)';
    }
    const yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
    return yiq >= 128 ? '#000' : '#fff';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjL2xpYi9jb21tb24vIiwic291cmNlcyI6WyJoZWxwZXJzL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUk1QyxNQUFNLFVBQVUsd0JBQXdCLENBQUMsSUFBSTtJQUMzQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3RCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUNELE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxDQUFDLENBQUM7U0FDYjtRQUNELElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQ3BDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztZQUM3QixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxDQUFDLENBQUM7YUFDYjtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFlLEVBQUUsWUFBc0I7SUFDbkUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RSxJQUFJLFlBQVksRUFBRTtRQUNoQixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ25CO0lBRUQsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDZixHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsTUFBTSxXQUFXLEdBQUcsR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwRCxPQUFPO1FBQ0wsR0FBRztRQUNILEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUN0RCxHQUFHO1FBQ0gsR0FBRztRQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07S0FDcEIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEdBQVc7SUFDcEMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFJO0lBQ3RDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxhQUFhLEVBQUU7UUFDN0IsT0FBTyxpQkFBaUIsQ0FBQztLQUMxQjtJQUNELE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDekUsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcclxuXHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi9jb2xvci5pbnRlcmZhY2VzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IoZGF0YSkge1xyXG4gIGNvbnN0IGtleXNUb0NoZWNrID0gWydyJywgJ2cnLCAnYicsICdhJywgJ2gnLCAncycsICdsJywgJ3YnXTtcclxuICBsZXQgY2hlY2tlZCA9IDA7XHJcbiAgbGV0IHBhc3NlZCA9IDA7XHJcbiAga2V5c1RvQ2hlY2suZm9yRWFjaChsZXR0ZXIgPT4ge1xyXG4gICAgaWYgKCFkYXRhW2xldHRlcl0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY2hlY2tlZCArPSAxO1xyXG4gICAgaWYgKCFpc05hTihkYXRhW2xldHRlcl0pKSB7XHJcbiAgICAgIHBhc3NlZCArPSAxO1xyXG4gICAgfVxyXG4gICAgaWYgKGxldHRlciA9PT0gJ3MnIHx8IGxldHRlciA9PT0gJ2wnKSB7XHJcbiAgICAgIGNvbnN0IHBlcmNlbnRQYXR0ID0gL15cXGQrJSQvO1xyXG4gICAgICBpZiAocGVyY2VudFBhdHQudGVzdChkYXRhW2xldHRlcl0pKSB7XHJcbiAgICAgICAgcGFzc2VkICs9IDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gY2hlY2tlZCA9PT0gcGFzc2VkID8gZGF0YSA6IGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9TdGF0ZShkYXRhLCBvbGRIdWU/OiBudW1iZXIsIGRpc2FibGVBbHBoYT86IGJvb2xlYW4pOiBDb2xvciB7XHJcbiAgY29uc3QgY29sb3IgPSBkYXRhLmhleCA/IG5ldyBUaW55Q29sb3IoZGF0YS5oZXgpIDogbmV3IFRpbnlDb2xvcihkYXRhKTtcclxuICBpZiAoZGlzYWJsZUFscGhhKSB7XHJcbiAgICBjb2xvci5zZXRBbHBoYSgxKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGhzbCA9IGNvbG9yLnRvSHNsKCk7XHJcbiAgY29uc3QgaHN2ID0gY29sb3IudG9Ic3YoKTtcclxuICBjb25zdCByZ2IgPSBjb2xvci50b1JnYigpO1xyXG4gIGNvbnN0IGhleCA9IGNvbG9yLnRvSGV4KCk7XHJcbiAgaWYgKGhzbC5zID09PSAwKSB7XHJcbiAgICBoc2wuaCA9IG9sZEh1ZSB8fCAwO1xyXG4gICAgaHN2LmggPSBvbGRIdWUgfHwgMDtcclxuICB9XHJcbiAgY29uc3QgdHJhbnNwYXJlbnQgPSBoZXggPT09ICcwMDAwMDAnICYmIHJnYi5hID09PSAwO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaHNsLFxyXG4gICAgaGV4OiB0cmFuc3BhcmVudCA/ICd0cmFuc3BhcmVudCcgOiBjb2xvci50b0hleFN0cmluZygpLFxyXG4gICAgcmdiLFxyXG4gICAgaHN2LFxyXG4gICAgb2xkSHVlOiBkYXRhLmggfHwgb2xkSHVlIHx8IGhzbC5oLFxyXG4gICAgc291cmNlOiBkYXRhLnNvdXJjZSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEhleChoZXg6IHN0cmluZykge1xyXG4gIHJldHVybiBuZXcgVGlueUNvbG9yKGhleCkuaXNWYWxpZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0aW5nQ29sb3IoZGF0YSkge1xyXG4gIGlmICghZGF0YSkge1xyXG4gICAgcmV0dXJuICcjZmZmJztcclxuICB9XHJcbiAgY29uc3QgY29sID0gdG9TdGF0ZShkYXRhKTtcclxuICBpZiAoY29sLmhleCA9PT0gJ3RyYW5zcGFyZW50Jykge1xyXG4gICAgcmV0dXJuICdyZ2JhKDAsMCwwLDAuNCknO1xyXG4gIH1cclxuICBjb25zdCB5aXEgPSAoY29sLnJnYi5yICogMjk5ICsgY29sLnJnYi5nICogNTg3ICsgY29sLnJnYi5iICogMTE0KSAvIDEwMDA7XHJcbiAgcmV0dXJuIHlpcSA+PSAxMjggPyAnIzAwMCcgOiAnI2ZmZic7XHJcbn1cclxuIl19